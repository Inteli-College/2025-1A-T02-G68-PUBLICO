import { OrdersService } from './orders.service';
import { CreateOrderDto } from './dto/create-orders.dto';
import { UpdateOrderDto } from './dto/update-orders.dto';
import { OrderStatus } from '@prisma/client';
export declare class OrdersController {
    private readonly ordersService;
    constructor(ordersService: OrdersService);
    create(createOrderDto: CreateOrderDto): Promise<{
        order: {
            id: string;
            status: import(".prisma/client").$Enums.OrderStatus;
            createdAt: Date;
            updatedAt: Date;
            bookId: string;
            instrumentId: string;
            accountId: string | null;
            side: import(".prisma/client").$Enums.OrderSide;
            quantity: number;
            price: number | null;
            remaining_qty: number;
            tag_ids: string[];
            counterpartyId: string | null;
            traderId: string;
            orderType: import(".prisma/client").$Enums.OrderType | null;
            expiryDate: Date | null;
            paymentType: import(".prisma/client").$Enums.PaymentType | null;
            accr_method: import(".prisma/client").$Enums.accrual_method | null;
            comp_freq: import(".prisma/client").$Enums.CompFreq | null;
            payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
            payment_bdc: import(".prisma/client").$Enums.PaymentBDC | null;
        };
        allocations: {
            orderId: string;
            accountId: string;
            quantity: number;
        }[];
    }>;
    findAll(bookId?: string, instrumentId?: string, status?: OrderStatus, traderId?: string): Promise<({
        trader: {
            id: string;
            name: string;
            status: boolean;
            last_name: string;
            photo: string | null;
            email: string;
            cpf: string;
            role: import(".prisma/client").$Enums.Role;
            region: string;
            companyId: string | null;
            createdAt: Date;
            updatedAt: Date;
        };
        trades: {
            id: string;
            status: boolean;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            bookId: string;
            instrumentId: string;
            quantity: number;
            price: number;
            tag_ids: string[];
            counterpartyId: string;
            traderId: string;
            orderType: import(".prisma/client").$Enums.OrderType | null;
            paymentType: import(".prisma/client").$Enums.PaymentType | null;
            accr_method: import(".prisma/client").$Enums.accrual_method | null;
            comp_freq: import(".prisma/client").$Enums.CompFreq | null;
            payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
            payment_bdc: import(".prisma/client").$Enums.PaymentBDC;
            fees: number;
            positionId: string;
            orderId: string | null;
            trade: import(".prisma/client").$Enums.TxnType;
            trade_type: string;
        }[];
        book: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string;
        };
        instrument: {
            id: string;
            status: boolean;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            type: import(".prisma/client").$Enums.instrument_type;
            ticker: string;
            cusip: string | null;
            isin: string | null;
            sedol: string | null;
            exchange: string | null;
            category: string;
            currency: string;
        };
        counterparty: {
            number: number;
            id: string;
            name: string;
        } | null;
        tags: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            color: string | null;
        }[];
    } & {
        id: string;
        status: import(".prisma/client").$Enums.OrderStatus;
        createdAt: Date;
        updatedAt: Date;
        bookId: string;
        instrumentId: string;
        accountId: string | null;
        side: import(".prisma/client").$Enums.OrderSide;
        quantity: number;
        price: number | null;
        remaining_qty: number;
        tag_ids: string[];
        counterpartyId: string | null;
        traderId: string;
        orderType: import(".prisma/client").$Enums.OrderType | null;
        expiryDate: Date | null;
        paymentType: import(".prisma/client").$Enums.PaymentType | null;
        accr_method: import(".prisma/client").$Enums.accrual_method | null;
        comp_freq: import(".prisma/client").$Enums.CompFreq | null;
        payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
        payment_bdc: import(".prisma/client").$Enums.PaymentBDC | null;
    })[]>;
    findOne(id: string): Promise<{
        trader: {
            id: string;
            name: string;
            status: boolean;
            last_name: string;
            photo: string | null;
            email: string;
            cpf: string;
            role: import(".prisma/client").$Enums.Role;
            region: string;
            companyId: string | null;
            createdAt: Date;
            updatedAt: Date;
        };
        trades: {
            id: string;
            status: boolean;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            bookId: string;
            instrumentId: string;
            quantity: number;
            price: number;
            tag_ids: string[];
            counterpartyId: string;
            traderId: string;
            orderType: import(".prisma/client").$Enums.OrderType | null;
            paymentType: import(".prisma/client").$Enums.PaymentType | null;
            accr_method: import(".prisma/client").$Enums.accrual_method | null;
            comp_freq: import(".prisma/client").$Enums.CompFreq | null;
            payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
            payment_bdc: import(".prisma/client").$Enums.PaymentBDC;
            fees: number;
            positionId: string;
            orderId: string | null;
            trade: import(".prisma/client").$Enums.TxnType;
            trade_type: string;
        }[];
        book: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string;
        };
        instrument: {
            id: string;
            status: boolean;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            type: import(".prisma/client").$Enums.instrument_type;
            ticker: string;
            cusip: string | null;
            isin: string | null;
            sedol: string | null;
            exchange: string | null;
            category: string;
            currency: string;
        };
        counterparty: {
            number: number;
            id: string;
            name: string;
        } | null;
        tags: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            color: string | null;
        }[];
    } & {
        id: string;
        status: import(".prisma/client").$Enums.OrderStatus;
        createdAt: Date;
        updatedAt: Date;
        bookId: string;
        instrumentId: string;
        accountId: string | null;
        side: import(".prisma/client").$Enums.OrderSide;
        quantity: number;
        price: number | null;
        remaining_qty: number;
        tag_ids: string[];
        counterpartyId: string | null;
        traderId: string;
        orderType: import(".prisma/client").$Enums.OrderType | null;
        expiryDate: Date | null;
        paymentType: import(".prisma/client").$Enums.PaymentType | null;
        accr_method: import(".prisma/client").$Enums.accrual_method | null;
        comp_freq: import(".prisma/client").$Enums.CompFreq | null;
        payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
        payment_bdc: import(".prisma/client").$Enums.PaymentBDC | null;
    }>;
    update(id: string, updateOrderDto: UpdateOrderDto): Promise<{
        trader: {
            id: string;
            name: string;
            status: boolean;
            last_name: string;
            photo: string | null;
            email: string;
            cpf: string;
            role: import(".prisma/client").$Enums.Role;
            region: string;
            companyId: string | null;
            createdAt: Date;
            updatedAt: Date;
        };
        trades: {
            id: string;
            status: boolean;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            bookId: string;
            instrumentId: string;
            quantity: number;
            price: number;
            tag_ids: string[];
            counterpartyId: string;
            traderId: string;
            orderType: import(".prisma/client").$Enums.OrderType | null;
            paymentType: import(".prisma/client").$Enums.PaymentType | null;
            accr_method: import(".prisma/client").$Enums.accrual_method | null;
            comp_freq: import(".prisma/client").$Enums.CompFreq | null;
            payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
            payment_bdc: import(".prisma/client").$Enums.PaymentBDC;
            fees: number;
            positionId: string;
            orderId: string | null;
            trade: import(".prisma/client").$Enums.TxnType;
            trade_type: string;
        }[];
        book: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string;
        };
        instrument: {
            id: string;
            status: boolean;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            type: import(".prisma/client").$Enums.instrument_type;
            ticker: string;
            cusip: string | null;
            isin: string | null;
            sedol: string | null;
            exchange: string | null;
            category: string;
            currency: string;
        };
        counterparty: {
            number: number;
            id: string;
            name: string;
        } | null;
        tags: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            color: string | null;
        }[];
    } & {
        id: string;
        status: import(".prisma/client").$Enums.OrderStatus;
        createdAt: Date;
        updatedAt: Date;
        bookId: string;
        instrumentId: string;
        accountId: string | null;
        side: import(".prisma/client").$Enums.OrderSide;
        quantity: number;
        price: number | null;
        remaining_qty: number;
        tag_ids: string[];
        counterpartyId: string | null;
        traderId: string;
        orderType: import(".prisma/client").$Enums.OrderType | null;
        expiryDate: Date | null;
        paymentType: import(".prisma/client").$Enums.PaymentType | null;
        accr_method: import(".prisma/client").$Enums.accrual_method | null;
        comp_freq: import(".prisma/client").$Enums.CompFreq | null;
        payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
        payment_bdc: import(".prisma/client").$Enums.PaymentBDC | null;
    }>;
    cancel(id: string): Promise<{
        id: string;
        status: import(".prisma/client").$Enums.OrderStatus;
        createdAt: Date;
        updatedAt: Date;
        bookId: string;
        instrumentId: string;
        accountId: string | null;
        side: import(".prisma/client").$Enums.OrderSide;
        quantity: number;
        price: number | null;
        remaining_qty: number;
        tag_ids: string[];
        counterpartyId: string | null;
        traderId: string;
        orderType: import(".prisma/client").$Enums.OrderType | null;
        expiryDate: Date | null;
        paymentType: import(".prisma/client").$Enums.PaymentType | null;
        accr_method: import(".prisma/client").$Enums.accrual_method | null;
        comp_freq: import(".prisma/client").$Enums.CompFreq | null;
        payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
        payment_bdc: import(".prisma/client").$Enums.PaymentBDC | null;
    }>;
    executeOrder(id: string, executionData: {
        executedQuantity: number;
        executedPrice: number;
    }): Promise<{
        trades: import(".prisma/client").Prisma.tb_tradeUncheckedCreateInput[];
        updatedOrder: {
            id: string;
            status: import(".prisma/client").$Enums.OrderStatus;
            createdAt: Date;
            updatedAt: Date;
            bookId: string;
            instrumentId: string;
            accountId: string | null;
            side: import(".prisma/client").$Enums.OrderSide;
            quantity: number;
            price: number | null;
            remaining_qty: number;
            tag_ids: string[];
            counterpartyId: string | null;
            traderId: string;
            orderType: import(".prisma/client").$Enums.OrderType | null;
            expiryDate: Date | null;
            paymentType: import(".prisma/client").$Enums.PaymentType | null;
            accr_method: import(".prisma/client").$Enums.accrual_method | null;
            comp_freq: import(".prisma/client").$Enums.CompFreq | null;
            payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
            payment_bdc: import(".prisma/client").$Enums.PaymentBDC | null;
        };
    }>;
    allocateOrder(orderId: string, allocations: {
        accountId: string;
        quantity: number;
    }[]): Promise<{
        message: string;
        allocations: {
            accountId: string;
            quantity: number;
        }[];
    }>;
    delete(id: string): Promise<{
        id: string;
        status: import(".prisma/client").$Enums.OrderStatus;
        createdAt: Date;
        updatedAt: Date;
        bookId: string;
        instrumentId: string;
        accountId: string | null;
        side: import(".prisma/client").$Enums.OrderSide;
        quantity: number;
        price: number | null;
        remaining_qty: number;
        tag_ids: string[];
        counterpartyId: string | null;
        traderId: string;
        orderType: import(".prisma/client").$Enums.OrderType | null;
        expiryDate: Date | null;
        paymentType: import(".prisma/client").$Enums.PaymentType | null;
        accr_method: import(".prisma/client").$Enums.accrual_method | null;
        comp_freq: import(".prisma/client").$Enums.CompFreq | null;
        payment_frequency: import(".prisma/client").$Enums.PaymentFrequency | null;
        payment_bdc: import(".prisma/client").$Enums.PaymentBDC | null;
    }>;
}
